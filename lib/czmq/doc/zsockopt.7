'\" t
.\"     Title: zsockopt
.\"    Author: [see the "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 08/30/2011
.\"    Manual: czmq Manual
.\"    Source: czmq 1.1.0
.\"  Language: English
.\"
.TH "ZSOCKOPT" "7" "08/30/2011" "czmq 1\&.1\&.0" "czmq Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
zsockopt \- get/set 0MQ socket options
.SH "SYNOPSIS"
.sp
.nf
#if (ZMQ_VERSION_MAJOR == 2)
//  Get socket options
int  zsockopt_hwm (void *socket);
int  zsockopt_swap (void *socket);
int  zsockopt_affinity (void *socket);
int  zsockopt_rate (void *socket);
int  zsockopt_recovery_ivl (void *socket);
int  zsockopt_recovery_ivl_msec (void *socket);
int  zsockopt_mcast_loop (void *socket);
int  zsockopt_sndbuf (void *socket);
int  zsockopt_rcvbuf (void *socket);
int  zsockopt_linger (void *socket);
int  zsockopt_reconnect_ivl (void *socket);
int  zsockopt_reconnect_ivl_max (void *socket);
int  zsockopt_backlog (void *socket);
int  zsockopt_type (void *socket);
int  zsockopt_rcvmore (void *socket);
int  zsockopt_fd (void *socket);
int  zsockopt_events (void *socket);

//  Set socket options
void zsockopt_set_hwm (void *socket, int hwm);
void zsockopt_set_swap (void *socket, int swap);
void zsockopt_set_affinity (void *socket, int affinity);
void zsockopt_set_identity (void *socket, char * identity);
void zsockopt_set_rate (void *socket, int rate);
void zsockopt_set_recovery_ivl (void *socket, int recovery_ivl);
void zsockopt_set_recovery_ivl_msec (void *socket, int recovery_ivl_msec);
void zsockopt_set_mcast_loop (void *socket, int mcast_loop);
void zsockopt_set_sndbuf (void *socket, int sndbuf);
void zsockopt_set_rcvbuf (void *socket, int rcvbuf);
void zsockopt_set_linger (void *socket, int linger);
void zsockopt_set_reconnect_ivl (void *socket, int reconnect_ivl);
void zsockopt_set_reconnect_ivl_max (void *socket, int reconnect_ivl_max);
void zsockopt_set_backlog (void *socket, int backlog);
void zsockopt_set_subscribe (void *socket, char * subscribe);
void zsockopt_set_unsubscribe (void *socket, char * unsubscribe);
#endif

#if (ZMQ_VERSION_MAJOR == 3)
//  Get socket options
int  zsockopt_sndhwm (void *socket);
int  zsockopt_rcvhwm (void *socket);
int  zsockopt_affinity (void *socket);
int  zsockopt_rate (void *socket);
int  zsockopt_recovery_ivl (void *socket);
int  zsockopt_sndbuf (void *socket);
int  zsockopt_rcvbuf (void *socket);
int  zsockopt_linger (void *socket);
int  zsockopt_reconnect_ivl (void *socket);
int  zsockopt_reconnect_ivl_max (void *socket);
int  zsockopt_backlog (void *socket);
int  zsockopt_maxmsgsize (void *socket);
int  zsockopt_type (void *socket);
int  zsockopt_rcvmore (void *socket);
int  zsockopt_fd (void *socket);
int  zsockopt_events (void *socket);

//  Set socket options
void zsockopt_set_sndhwm (void *socket, int sndhwm);
void zsockopt_set_rcvhwm (void *socket, int rcvhwm);
void zsockopt_set_affinity (void *socket, int affinity);
void zsockopt_set_identity (void *socket, char * identity);
void zsockopt_set_rate (void *socket, int rate);
void zsockopt_set_recovery_ivl (void *socket, int recovery_ivl);
void zsockopt_set_sndbuf (void *socket, int sndbuf);
void zsockopt_set_rcvbuf (void *socket, int rcvbuf);
void zsockopt_set_linger (void *socket, int linger);
void zsockopt_set_reconnect_ivl (void *socket, int reconnect_ivl);
void zsockopt_set_reconnect_ivl_max (void *socket, int reconnect_ivl_max);
void zsockopt_set_backlog (void *socket, int backlog);
void zsockopt_set_maxmsgsize (void *socket, int maxmsgsize);
void zsockopt_set_subscribe (void *socket, char * subscribe);
void zsockopt_set_unsubscribe (void *socket, char * unsubscribe);

//  Emulation of widely\-used 2\&.x socket options
void zsockopt_set_hwm (void *socket, int hwm);
#endif

#if (ZMQ_VERSION_MAJOR == 4)
//  Get socket options
int  zsockopt_sndhwm (void *socket);
int  zsockopt_rcvhwm (void *socket);
int  zsockopt_affinity (void *socket);
int  zsockopt_rate (void *socket);
int  zsockopt_recovery_ivl (void *socket);
int  zsockopt_sndbuf (void *socket);
int  zsockopt_rcvbuf (void *socket);
int  zsockopt_linger (void *socket);
int  zsockopt_reconnect_ivl (void *socket);
int  zsockopt_reconnect_ivl_max (void *socket);
int  zsockopt_backlog (void *socket);
int  zsockopt_maxmsgsize (void *socket);
int  zsockopt_type (void *socket);
int  zsockopt_rcvmore (void *socket);
int  zsockopt_fd (void *socket);
int  zsockopt_events (void *socket);

//  Set socket options
void zsockopt_set_sndhwm (void *socket, int sndhwm);
void zsockopt_set_rcvhwm (void *socket, int rcvhwm);
void zsockopt_set_affinity (void *socket, int affinity);
void zsockopt_set_rate (void *socket, int rate);
void zsockopt_set_recovery_ivl (void *socket, int recovery_ivl);
void zsockopt_set_sndbuf (void *socket, int sndbuf);
void zsockopt_set_rcvbuf (void *socket, int rcvbuf);
void zsockopt_set_linger (void *socket, int linger);
void zsockopt_set_reconnect_ivl (void *socket, int reconnect_ivl);
void zsockopt_set_reconnect_ivl_max (void *socket, int reconnect_ivl_max);
void zsockopt_set_backlog (void *socket, int backlog);
void zsockopt_set_maxmsgsize (void *socket, int maxmsgsize);
void zsockopt_set_subscribe (void *socket, char * subscribe);
void zsockopt_set_unsubscribe (void *socket, char * unsubscribe);

//  Emulation of widely\-used 2\&.x socket options
void zsockopt_set_hwm (void *socket, int hwm);
#endif

//  Self test of this class
int zsockopt_test (Bool verbose);
.fi
.SH "DESCRIPTION"
.sp
The zsockopt class provides access to the 0MQ getsockopt/setsockopt API\&.
.sp
This class is generated, using the GSL code generator\&. See the sockopts XML file, which provides the metadata, and the sockopts\&.gsl template, which does the work\&.
.SH "EXAMPLE"
.PP
\fBFrom zsockopt_test method\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
    zctx_t *ctx = zctx_new ();
    void *socket;
#if (ZMQ_VERSION_MAJOR == 2)
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_hwm (socket, 1);
    assert (zsockopt_hwm (socket) == 1);
    zsockopt_hwm (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_swap (socket, 1);
    assert (zsockopt_swap (socket) == 1);
    zsockopt_swap (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_affinity (socket, 1);
    assert (zsockopt_affinity (socket) == 1);
    zsockopt_affinity (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_identity (socket, "test");
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_rate (socket, 1);
    assert (zsockopt_rate (socket) == 1);
    zsockopt_rate (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_recovery_ivl (socket, 1);
    assert (zsockopt_recovery_ivl (socket) == 1);
    zsockopt_recovery_ivl (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_recovery_ivl_msec (socket, 1);
    assert (zsockopt_recovery_ivl_msec (socket) == 1);
    zsockopt_recovery_ivl_msec (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_mcast_loop (socket, 1);
    assert (zsockopt_mcast_loop (socket) == 1);
    zsockopt_mcast_loop (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_sndbuf (socket, 1);
    assert (zsockopt_sndbuf (socket) == 1);
    zsockopt_sndbuf (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_rcvbuf (socket, 1);
    assert (zsockopt_rcvbuf (socket) == 1);
    zsockopt_rcvbuf (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_linger (socket, 1);
    assert (zsockopt_linger (socket) == 1);
    zsockopt_linger (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_reconnect_ivl (socket, 1);
    assert (zsockopt_reconnect_ivl (socket) == 1);
    zsockopt_reconnect_ivl (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_reconnect_ivl_max (socket, 1);
    assert (zsockopt_reconnect_ivl_max (socket) == 1);
    zsockopt_reconnect_ivl_max (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_backlog (socket, 1);
    assert (zsockopt_backlog (socket) == 1);
    zsockopt_backlog (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_subscribe (socket, "test");
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_unsubscribe (socket, "test");
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_type (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_rcvmore (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_fd (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_events (socket);
    zsocket_destroy (ctx, socket);
#endif

#if (ZMQ_VERSION_MAJOR == 3)
    socket = zsocket_new (ctx, ZMQ_PUB);
    zsockopt_set_sndhwm (socket, 1);
    assert (zsockopt_sndhwm (socket) == 1);
    zsockopt_sndhwm (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_rcvhwm (socket, 1);
    assert (zsockopt_rcvhwm (socket) == 1);
    zsockopt_rcvhwm (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_affinity (socket, 1);
    assert (zsockopt_affinity (socket) == 1);
    zsockopt_affinity (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_identity (socket, "test");
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_rate (socket, 1);
    assert (zsockopt_rate (socket) == 1);
    zsockopt_rate (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_recovery_ivl (socket, 1);
    assert (zsockopt_recovery_ivl (socket) == 1);
    zsockopt_recovery_ivl (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_PUB);
    zsockopt_set_sndbuf (socket, 1);
    assert (zsockopt_sndbuf (socket) == 1);
    zsockopt_sndbuf (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_rcvbuf (socket, 1);
    assert (zsockopt_rcvbuf (socket) == 1);
    zsockopt_rcvbuf (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_linger (socket, 1);
    assert (zsockopt_linger (socket) == 1);
    zsockopt_linger (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_reconnect_ivl (socket, 1);
    assert (zsockopt_reconnect_ivl (socket) == 1);
    zsockopt_reconnect_ivl (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_reconnect_ivl_max (socket, 1);
    assert (zsockopt_reconnect_ivl_max (socket) == 1);
    zsockopt_reconnect_ivl_max (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_backlog (socket, 1);
    assert (zsockopt_backlog (socket) == 1);
    zsockopt_backlog (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_maxmsgsize (socket, 1);
    assert (zsockopt_maxmsgsize (socket) == 1);
    zsockopt_maxmsgsize (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_subscribe (socket, "test");
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_unsubscribe (socket, "test");
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_type (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_rcvmore (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_fd (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_events (socket);
    zsocket_destroy (ctx, socket);

    zsockopt_set_hwm (socket, 1);
#endif

#if (ZMQ_VERSION_MAJOR == 4)
    socket = zsocket_new (ctx, ZMQ_PUB);
    zsockopt_set_sndhwm (socket, 1);
    assert (zsockopt_sndhwm (socket) == 1);
    zsockopt_sndhwm (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_rcvhwm (socket, 1);
    assert (zsockopt_rcvhwm (socket) == 1);
    zsockopt_rcvhwm (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_affinity (socket, 1);
    assert (zsockopt_affinity (socket) == 1);
    zsockopt_affinity (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_rate (socket, 1);
    assert (zsockopt_rate (socket) == 1);
    zsockopt_rate (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_recovery_ivl (socket, 1);
    assert (zsockopt_recovery_ivl (socket) == 1);
    zsockopt_recovery_ivl (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_PUB);
    zsockopt_set_sndbuf (socket, 1);
    assert (zsockopt_sndbuf (socket) == 1);
    zsockopt_sndbuf (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_rcvbuf (socket, 1);
    assert (zsockopt_rcvbuf (socket) == 1);
    zsockopt_rcvbuf (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_linger (socket, 1);
    assert (zsockopt_linger (socket) == 1);
    zsockopt_linger (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_reconnect_ivl (socket, 1);
    assert (zsockopt_reconnect_ivl (socket) == 1);
    zsockopt_reconnect_ivl (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_reconnect_ivl_max (socket, 1);
    assert (zsockopt_reconnect_ivl_max (socket) == 1);
    zsockopt_reconnect_ivl_max (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_backlog (socket, 1);
    assert (zsockopt_backlog (socket) == 1);
    zsockopt_backlog (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_maxmsgsize (socket, 1);
    assert (zsockopt_maxmsgsize (socket) == 1);
    zsockopt_maxmsgsize (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_subscribe (socket, "test");
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_set_unsubscribe (socket, "test");
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_type (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_rcvmore (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_fd (socket);
    zsocket_destroy (ctx, socket);
    socket = zsocket_new (ctx, ZMQ_SUB);
    zsockopt_events (socket);
    zsocket_destroy (ctx, socket);

    zsockopt_set_hwm (socket, 1);
#endif

    zctx_destroy (&ctx);
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.sp
\fBczmq\fR(7)
.SH "AUTHORS"
.sp
The czmq manual was written by Pieter Hintjens<\m[blue]\fBph@imatix\&.com\fR\m[]\&\s-2\u[1]\d\s+2>\&.
.SH "RESOURCES"
.sp
Main web site: \m[blue]\fBhttp://czmq\&.zeromq\&.org/\fR\m[]
.sp
Report bugs to the 0MQ development mailing list: <\m[blue]\fBzeromq\-dev@lists\&.zeromq\&.org\fR\m[]\&\s-2\u[2]\d\s+2>
.SH "COPYRIGHT"
.sp
Copyright (c) 1991\-2010 iMatix Corporation and contributors\&. License LGPLv3+: GNU LGPL 3 or later <\m[blue]\fBhttp://gnu\&.org/licenses/lgpl\&.html\fR\m[]>\&. This is free software: you are free to change it and redistribute it\&. There is NO WARRANTY, to the extent permitted by law\&. For details see the files COPYING and COPYING\&.LESSER included with the czmq distribution\&.
.SH "NOTES"
.IP " 1." 4
ph@imatix.com
.RS 4
\%mailto:ph@imatix.com
.RE
.IP " 2." 4
zeromq-dev@lists.zeromq.org
.RS 4
\%mailto:zeromq-dev@lists.zeromq.org
.RE
