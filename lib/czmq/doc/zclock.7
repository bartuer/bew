'\" t
.\"     Title: zclock
.\"    Author: [see the "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 08/30/2011
.\"    Manual: czmq Manual
.\"    Source: czmq 1.1.0
.\"  Language: English
.\"
.TH "ZCLOCK" "7" "08/30/2011" "czmq 1\&.1\&.0" "czmq Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
zclock \- millisecond clocks and delays
.SH "SYNOPSIS"
.sp
.nf
//  Sleep for a number of milliseconds
void
    zclock_sleep (int msecs);

//  Return current system clock as milliseconds
int64_t
    zclock_time (void);

//  Print formatted string to stdout, prefixed by date/time and
//  terminated with a newline\&.
void
    zclock_log (const char *format, \&.\&.\&.);

//  Self test of this class
int
    zclock_test (Bool verbose);
.fi
.SH "DESCRIPTION"
.sp
The zclock class provides essential sleep and system time functions, used to slow down threads for testing, and calculate timers for polling\&. Wraps the non\-portable system calls in a simple portable API\&.
.sp
This class contains some small surprises\&. Most amazing, win32 did an API better than POSIX\&. The win32 Sleep() call is not only a neat 1\-liner, it also sleeps for milliseconds, whereas the POSIX call asks us to think in terms of nanoseconds, which is insane\&. I\(cqve decided every single man page for this library will say "insane" at least once\&. Anyhow, milliseconds are a concept we can deal with\&. Seconds are too fat, nanoseconds too tiny, but milliseconds are just right for slices of time we want to work with at the 0MQ scale\&. zclock doesn\(cqt give you objects to work with, we like the czmq class model but we\(cqre not insane\&. There, got it in again\&. The Win32 Sleep() call defaults to 16ms resolution unless the system timer resolution is increased with a call to timeBeginPeriod() permitting 1ms granularity\&.
.SH "EXAMPLE"
.PP
\fBFrom zclock_test method\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
    int64_t start = zclock_time ();
    zclock_sleep (10);
    assert ((zclock_time () \- start) >= 10);
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.sp
\fBczmq\fR(7)
.SH "AUTHORS"
.sp
The czmq manual was written by Pieter Hintjens<\m[blue]\fBph@imatix\&.com\fR\m[]\&\s-2\u[1]\d\s+2>\&.
.SH "RESOURCES"
.sp
Main web site: \m[blue]\fBhttp://czmq\&.zeromq\&.org/\fR\m[]
.sp
Report bugs to the 0MQ development mailing list: <\m[blue]\fBzeromq\-dev@lists\&.zeromq\&.org\fR\m[]\&\s-2\u[2]\d\s+2>
.SH "COPYRIGHT"
.sp
Copyright (c) 1991\-2010 iMatix Corporation and contributors\&. License LGPLv3+: GNU LGPL 3 or later <\m[blue]\fBhttp://gnu\&.org/licenses/lgpl\&.html\fR\m[]>\&. This is free software: you are free to change it and redistribute it\&. There is NO WARRANTY, to the extent permitted by law\&. For details see the files COPYING and COPYING\&.LESSER included with the czmq distribution\&.
.SH "NOTES"
.IP " 1." 4
ph@imatix.com
.RS 4
\%mailto:ph@imatix.com
.RE
.IP " 2." 4
zeromq-dev@lists.zeromq.org
.RS 4
\%mailto:zeromq-dev@lists.zeromq.org
.RE
