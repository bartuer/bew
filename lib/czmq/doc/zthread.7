'\" t
.\"     Title: zthread
.\"    Author: [see the "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 08/30/2011
.\"    Manual: czmq Manual
.\"    Source: czmq 1.1.0
.\"  Language: English
.\"
.TH "ZTHREAD" "7" "08/30/2011" "czmq 1\&.1\&.0" "czmq Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
zthread \- working with system threads
.SH "SYNOPSIS"
.sp
.nf
//  Detached threads follow POSIX pthreads API
typedef void *(zthread_detached_fn) (void *args);

//  Attached threads get context and pipe from parent
typedef void (zthread_attached_fn) (void *args, zctx_t *ctx, void *pipe);

//  Create a detached thread\&. A detached thread operates autonomously
//  and is used to simulate a separate process\&. It gets no ctx, and no
//  pipe\&.
void
    zthread_new (zthread_detached_fn *thread_fn, void *args);

//  Create an attached thread\&. An attached thread gets a ctx and a PAIR
//  pipe back to its parent\&. It must monitor its pipe, and exit if the
//  pipe becomes unreadable\&.
void *
    zthread_fork (zctx_t *ctx, zthread_attached_fn *thread_fn, void *args);

//  Self test of this class
int
    zthread_test (Bool verbose);
.fi
.SH "DESCRIPTION"
.sp
The zthread class wraps OS thread creation\&. It creates detached threads that look like normal OS threads, or attached threads that share the caller\(cqs 0MQ context, and get a pipe to talk back to the parent thread\&.
.sp
One problem is when our application needs child threads\&. If we simply use pthreads_create() we\(cqre faced with several issues\&. First, it\(cqs not portable to legacy OSes like win32\&. Second, how can a child thread get access to our zctx object? If we just pass it around, we\(cqll end up sharing the pipe socket (which we use to talk to the agent) between threads, and that will then crash 0MQ\&. Sockets cannot be used from more than one thread at a time\&.
.sp
So each child thread needs its own pipe to the agent\&. For the agent, this is fine, it can talk to a million threads\&. But how do we create those pipes in the child thread? We can\(cqt, not without help from the main thread\&. The solution is to wrap thread creation, like we wrap socket creation\&. To create a new thread, the app calls zctx_thread_new() and this method creates a dedicated zctx object, with a pipe, and then it passes that object to the newly minted child thread\&.
.sp
The neat thing is we can hide non\-portable aspects\&. Windows is really a mess when it comes to threads\&. Three different APIs, none of which is really right, so you have to do rubbish like manually cleaning up when a thread finishes\&. Anyhow, it\(cqs hidden in this class so you don\(cqt need to worry\&.
.sp
Second neat thing about wrapping thread creation is we can make it a more enriching experience for all involved\&. One thing I do often is use a PAIR\-PAIR pipe to talk from a thread to/from its parent\&. So this class will automatically create such a pair for each thread you start\&.
.SH "EXAMPLE"
.PP
\fBFrom zthread_test method\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
static void *
s_test_detached (void *args)
{
    //  Create a socket to check it\*(Aqll be automatically deleted
    zctx_t *ctx = zctx_new ();
    void *push = zsocket_new (ctx, ZMQ_PUSH);
    zctx_destroy (&ctx);
    return NULL;
}

static void
s_test_attached (void *args, zctx_t *ctx, void *pipe)
{
    //  Create a socket to check it\*(Aqll be automatically deleted
    zsocket_new (ctx, ZMQ_PUSH);
    //  Wait for our parent to ping us, and pong back
    free (zstr_recv (pipe));
    zstr_send (pipe, "pong");
}

    zctx_t *ctx = zctx_new ();

    //  Create a detached thread, let it run
    zthread_new (s_test_detached, NULL);
    zclock_sleep (100);

    //  Create an attached thread, check it\*(Aqs safely alive
    void *pipe = zthread_fork (ctx, s_test_attached, NULL);
    zstr_send (pipe, "ping");
    char *pong = zstr_recv (pipe);
    assert (streq (pong, "pong"));
    free (pong);

    //  Everything should be cleanly closed now
    zctx_destroy (&ctx);
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.sp
\fBczmq\fR(7)
.SH "AUTHORS"
.sp
The czmq manual was written by Pieter Hintjens<\m[blue]\fBph@imatix\&.com\fR\m[]\&\s-2\u[1]\d\s+2>\&.
.SH "RESOURCES"
.sp
Main web site: \m[blue]\fBhttp://czmq\&.zeromq\&.org/\fR\m[]
.sp
Report bugs to the 0MQ development mailing list: <\m[blue]\fBzeromq\-dev@lists\&.zeromq\&.org\fR\m[]\&\s-2\u[2]\d\s+2>
.SH "COPYRIGHT"
.sp
Copyright (c) 1991\-2010 iMatix Corporation and contributors\&. License LGPLv3+: GNU LGPL 3 or later <\m[blue]\fBhttp://gnu\&.org/licenses/lgpl\&.html\fR\m[]>\&. This is free software: you are free to change it and redistribute it\&. There is NO WARRANTY, to the extent permitted by law\&. For details see the files COPYING and COPYING\&.LESSER included with the czmq distribution\&.
.SH "NOTES"
.IP " 1." 4
ph@imatix.com
.RS 4
\%mailto:ph@imatix.com
.RE
.IP " 2." 4
zeromq-dev@lists.zeromq.org
.RS 4
\%mailto:zeromq-dev@lists.zeromq.org
.RE
