* Introduction
  (link "cbt.c" 103)
  This code is taken from Dan Bernstein's qhasm and implements a
  binary crit-bit (alsa known as PATRICA) tree for NUL terminated
  strings. Crit-bit trees are underused and it's this author's hope
  that a good example will aid their adoption.

  Internal nodes in a crit-bit store a position in the input and two
  children. The position is the next location in which two members
  differ (the critical bit). For a given set of elements there is a
  unique crit-bit tree representing that set, thus a crit-bit tree
  does not need complex balancing algorithms. The depth of a crit-bit
  tree is bounded by the length of the longest element, rather than
  the number of elements (as with an unbalanced tree). Thus, if the
  crit-bit tree is defined on a finite domain (say, the set of 32-bit
  integers) then the maximum depth is 32, since no two 32-bit integers
  can differ in the $33^{rd}$ bit.

  Crit-bit trees also support the usual tree operations quickly:
  membership-testing, insertion, removal, predecessor, successor and
  easy iteration. For NUL terminated strings they are especially
  helpful since they don't require an expensive string comparison at
  each step.

  This code, like Prof.~ Bernstein's original code, is released into
  the public domain. It can be found at http://github.com/agl/critbit.

  see djb's original description http://cr.yp.to/critbit.html
* Membership testing.

  The first function that we'll deal with will be membership testing. The
  following function takes a tree, t, and a NUL terminated string, u, and
  returns non-zero if u in t.
  (link "cbt.c" 137)

*** Searching the tree

    Once we have established that the tree is not empty, it therefore has one or
    more members. Now we need to distinguish between internal and external nodes.

    Internal nodes are cbt_node structures (link "cbt.h" 181). They
    record that the tree diverges at some point. External nodes are
    allocated strings. Thus, a tree with a single member is one where
    the root pointer points at an allocated string.  However, we need
    to be able to test a given pointer to know if it points at an
    internal or external node. Several possibilities present
    themselves: a common structure as a prefix to both the internal
    and external nodes, tags associated with every pointer, etc. In
    this case, we include the tag in the pointer itself as the
    least-significant bit. We assume that both types of nodes are
    aligned to, at least, two bytes and thus the LSB is free to be
    used as a tag bit.  Internal nodes are tagged with a 1 and
    external nodes are tagged with a 0.
    (link "cbt.c" 373)

    When walking the tree we obviously want to break out when we reach an external
    node. Thus we use a while loop that tests that the current node pointer is
    always pointing at an internal node.

*** Encoding a location

    Recall that a crit-bit tree works by encoding the bit-number that differs at
    each branch in the tree. The obvious way to do this would either be with a
    single number (the number of bits from the beginning of the string), or with a
    (byte number, bit number in [0..7]) pair.

    However, for reasons that should become clear later, here we encode it as a
    byte number and a single byte where all the bits except the critical bit
    are true. By performing a bitwise OR with the correct byte there are only two
    results: If the byte did not have the critical bit set, the result is the same
    as the mask.  If it did, the result is all ones. The latter case is the unique
    8-bit value where adding one and right-shifting 8 places results in a 1. We use
    this to obtain the direction.
    (link "cbt.c" 675)

    Note also that our strings are treated as if they had an infinitely long suffix
    of NUL bytes following them. Thus, if the critical bit is beyond the end of
    our string, we treat it as if it had a zero bit there.

*** The final test

    Once we have reached an external node we can only conclude that certain
    bits of the string are shared with a string in the tree. We still need to
    test the best match to make sure that it's correct. If the test fails, however,
    we can conclude that the string is not in the tree.
    (link "cbt.c" 752)

    Note that the pointer cannot be NULL. We tested that the root pointer was not
    NULL at the start of the function and, if an internal node had a NULL pointer
    then the tree would be invalid - that internal node should be removed.

* Insert into the tree

  This is a more complex function. It takes a tree, t, and possibly
  mutates it such that a NUL terminated string, u, is a member on
  exit. It returns:

  {
    0 : out of memory
    1 : u was already a member
    2 : t was mutated successfully
  }
  (link "cbt.c" 790)

*** Inserting into an empty tree

    Recall that an empty tree has a NULL root pointer. A singleton
    tree, the result of inserting into the empty tree, has the root
    pointing at an external node - the sole member of the tree.
    (link "cbt.c" 999)

    We require the ability to malloc a buffer with alignment 2 and so
    use posix_memalign to allocate memory.
    (link "cbt.c" 1036)

*** Finding the critical bit

    Find the critical bit=
    Find differing byte;
    Find differing bit;

***** Finding the differing byte

      Now that we have found the best match for the new element in the
      tree we need to check to see where the new element differs from
      that element. If it doesn't differ, of course, then the new
      element already exists in the tree and we can return 1. Remember
      that we treat strings as if they had an infinite number of NULs
      following them and that the best match string might be longer
      than u.
      (link "cbt.c" 1712)

      While calculating the differing byte we also calculate
      newotherbits, the XOR of the differing byte. This will become
      clear in the next section.

***** Finding the differing bit

      Once we have the XOR of first differing byte in newotherbits we
      need to find the most significant differing bit. We could do
      this with a simple for loop, testing bits 7..0, instead we use
      the following trick:

      The only non-zero values for which the sets of true bits for x
      and x-1 are disjoint, are powers of two. To see this consider
      the bit representation of the value in three pieces: a series of
      zeros (maybe empty), a one, and zero or more ones and zeros.
      Since we are only considering non-zero values this can be
      performed without loss of generality. If the third part contains
      any ones, this number is not a power of two and subtracting one
      will only alter the third part. Thus, in this case, x and x-1
      have at least one element in common:  the leading one.
      (link "cbt.c" 2282)

      However, if the third part consists only of zeros then the
      number is a power of two. Also, subtracting one will result in
      clearing the bit in the second part and turning the third part
      to all ones. Thus the sets are disjoint and x & (x-1) is false.
      (link "cbt.c" 2282)

      So, we have a test for finding values with only a single bit
      set. Now consider that, if the test fails, x & (x-1) must
      preserve the most-significant one and must be less than x: since
      the bit pattern in the third part changes, at least one bit must
      be zeroed. Therefore, repeatedly applying the test and, if it
      fails, updating x in this fashion, must result in a value with
      only the leading one set.
      (link "cbt.c" 2095)

      Once we have this value, we invert all the bits resulting in a
      value suitable for our otherbits member.
      (link "cbt.c" 2372)
*** Allocating a new node

    This is obviously fairly pedestrian code. Again, we use
    posix_memalign to make sure that our node structures have an
    alignment of at least two. We store the new copy of the string
    into the correct child pointer and save the other for when we have
    worked out where to insert the new node
    (link "cbt.c" 2468)

*** Inserting a new node in the tree

    Here we must recall that, for a given set of elements, there is a
    unique crit-bit tree representing them. This statement needs a
    little bit of qualification because it also requires that we
    define a total ordering of crit-bits.

    Consider the set of bitstrings 000, 001, 101, inserted into a
    crit-bit tree in that order. One could imagine the resulting tree
    looking like this:

               root
                 |
                 |
                 |
                3rd
                / \
               /   \
              /     \
            000     1st
                    / \
                   /   \
                  /     \
                001     101

    Where internal nodes contain the critical bit, counting from the left.

    That would be a valid tree for searching as far as our searching
    algorithm goes, but it does make a mess of predecessor and
    successor operations when the forks might not test the bits in any
    special order.

    So, in short, we need the order of the crit-bits to match the
    lexicographical order that we expect the predecessor and successor
    operations to follow. Thus, inserting the new node in the tree
    involves walking the tree from the root to find the correct
    position to insert at.
    (link "cbt.c" 2824)

    We keep track of the pointer to be updated (to point to the new
    internal node) and, once the walk has finished, we can update that
    pointer.

* Deleting elements.

  This function takes a tree, t, and a NUL terminated string, u, and
  possibly mutates the tree such that u not in t. It returns 1 if the
  tree was mutated, 0 otherwise.
  (link "cbt.c" 3207)

*** Deleting from the empty tree

    Since no element is the member of the empty tree, this is a very
    easy case: we can just return 0.
    (link "cbt.c" 3714)

*** Finding the best candidate to delete

    Walking the tree to find the best match for a given element is
    almost the same as the two previous versions that we've seen. The
    only exception is that we keep track of the last jump to an
    internal node in whereq. Actually, we keep track of a pointer to
    the last pointer that got us to an internal node.
    (link "cbt.c" 4063)

    To see why, consider the typical case:

        root
         |
         |
         |
         x
        / \
       /   \
      /     \
    ...      y
            / \
           /   \
          /     \
        ...    1100

    Here we wish to remove 1100, however if we left its parent with a
    single child pointer, that would make the parent nothing more than
    a bump in the road - it should also be removed. Thus we need a
    pointer to the grandparent in order to remove both the string and
    the internal node that pointed to it.
    (link "cbt.c" 4336)

*** Checking that we have the right element

    As usual, we have now found the best match, an external node, but
    we still need to compare the strings to check that we actually
    have a match. If we don't, then the element cannot be in the tree
    and we can return 0. Otherwise, the external node is no longer
    useful and can be freed.
    (link "cbt.c" 4393)

*** Removing the node

    We now have to deal with two cases. The simple case is as outlined
    in the diagram above: we remove the parent node and point the
    grand parent to to other child of the parent.
    (link "cbt.c" 4655)

    We also have to keep in mind that there might not be a grandparent
    node.  This is the case when the tree only has one element. In
    this case, we remove that element and set the root pointer to
    NULL.
    (link "cbt.c" 4507)

* Clearing a tree.

  Clearing a tree (freeing all members) brings us our first code for
  walking the whole tree rather than just tracing a path through it.

  So, the cbt_clear function takes a tree, t, and frees every member
  of it, mutating the tree such that it is empty on exit.
  (link "cbt.c" 5033)

*** Recursively clearing the tree

    Each pointer in the tree has to be tested to see if it's a pointer
    to an internal node (a cbt_node) or to a malloced string. If it's
    a node, we need to recursively free its children.
    (link "cbt.c" 4766)

* Fetching elements with a given prefix

  One of the operations which crit-bit trees can perform efficiently
  that hash tables cannot is the extraction of the subset of elements
  with a given prefix.

  The following function takes a tree, t, and a NUL terminated string,
  prefix. Let S is subset of t, where x in S, if prefix is a prefix of
  x, then for all x in S handle is called with arguments x and arg. It
  returns:

  {
    0 : if handle returned 0
    1 : successful
    2 : if handle returned a value not in [0,1]
  }
  (link "cbt.c" 5801)
  (Note that, if handle returns 0, the iteration is aborted)

*** Dealing with an internal node while recursing

    The allprefixed_traverse function is called with the root of a
    subtree as the top argument. We need to test the LSB of this
    pointer to see if it's an internal node. If so, we recursively
    walk down the subtree and return. Otherwise we fall through into
    the code from the section below for handling an external node.
    
    (link "cbt.c" 4788)
*** Dealing with an external node while recursing

    An external node is a malloced string that matches the given
    prefix. Thus we call the callback and we're done.

    (link "cbt.c" 5694)

*** Maintaining the top pointer

    The top pointer points to the internal node at the top of the
    subtree which contains exactly the subset of elements matching the
    given prefix. Since our critbit values are sorted as we descend
    the tree, this subtree exists (if the subset is non-empty) and can
    be detected by checking for the critbit advancing beyond the
    length of the prefix.
    (link "cbt.c" 6143)

*** Checking that the prefix exists

    As with our other functions, it's possible that the given prefix
    doesn't actually exist in the tree at this point. We need to check
    the actual contents of the external node that we have arrived at.
    (link "cbt.c" 6580)